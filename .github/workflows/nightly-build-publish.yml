name: Nightly Test and Publish

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version (e.g. 0.2.21-dev.20250911)'
        required: false
        type: string
      commit_hash:
        description: 'Optional: specific commit hash to use'
        required: false
        type: string
      cut_mode:
        description: 'Mode to run the script in (test-and-cut, cut-only)'
        type: string
        default: 'test-and-cut'
      llama_stack_only:
        description: 'Only cut a llama-stack nightly release'
        required: false
        type: boolean
        default: false
  schedule:
    - cron: "0 4 * * *"  # Run every day at 4 AM UTC

jobs:
  generate-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
    - uses: actions/checkout@v4
    - name: Generate nightly version
      id: version
      run: |
        if [ -n "${{ inputs.version }}" ]; then
          echo "Using provided VERSION: ${{ inputs.version }}"
          echo "version=${{ inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "Extracting base version from llama-stack repo..."

          # Clone llama-stack repo to extract version
          git clone --depth 1 "https://x-access-token:${{ secrets.LLAMA_REPOS_PAT }}@github.com/meta-llama/llama-stack.git" temp-version-check
          cd temp-version-check

          # Extract version from pyproject.toml and increment patch version
          base_version=$(python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")
          echo "Extracted version from pyproject.toml: $base_version"

          # Increment patch version
          incremented_version=$(python -c "version = '$base_version'; major, minor, patch = version.split('.'); print(f'{major}.{minor}.{int(patch) + 1}')")

          # Generate nightly version with date suffix
          date=$(date +%Y%m%d)
          version="${incremented_version}-dev.${date}"

          echo "Generated nightly version: $version (incremented from base: $base_version to: $incremented_version)"
          echo "version=$version" >> $GITHUB_OUTPUT
        fi

  test-and-cut:
    needs: generate-version
    runs-on: ubuntu-latest
    environment:
      name: testrelease
    permissions:
      contents: read
    steps:
    - uses: actions/checkout@v4
    - uses: ./actions/test-and-cut
      with:
        version: ${{ needs.generate-version.outputs.version }}
        commit_hash: ${{ inputs.commit_hash }}
        cut_mode: ${{ inputs.cut_mode }}
        llama_stack_only: ${{ inputs.llama_stack_only }}
        # TODO: this will expire in 90 days; we should figure out a
        # GitHub App setup that can be used instead
        github_token: ${{ secrets.LLAMA_REPOS_PAT }}

  upload-packages-and-tag:
    needs:
      - generate-version
      - test-and-cut
    environment:
      name: testrelease
    runs-on: ubuntu-latest
    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing
      contents: read
    steps:
    - uses: actions/checkout@v4
    - uses: ./actions/upload-packages-and-tag
      with:
        version: ${{ needs.generate-version.outputs.version }}
        llama_stack_only: ${{ inputs.llama_stack_only }}
        # TODO: this will expire in 90 days; we should figure out a
        # GitHub App setup that can be used instead
        github_token: ${{ secrets.LLAMA_REPOS_PAT }}
        npm_token: ${{ secrets.NPM_TOKEN }}

  test-published-package:
    needs:
      - generate-version
      - upload-packages-and-tag
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: ./actions/test-published-package
      with:
        version: ${{ needs.generate-version.outputs.version }}
