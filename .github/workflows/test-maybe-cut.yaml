name: Test and Possibly Cut a Branch

on:
  workflow_dispatch:
    inputs:
      commit_hash:
        description: 'Optional: specific commit hash to test'
        required: false
        type: string
      version:
        description: 'Version (e.g. 0.1.1rc2); if empty, will use dev version'
        required: false
        type: string
      cut_mode:
        description: 'Mode to run the script in (test-and-cut, test-only, cut-only)'
        required: false
        type: string
        default: 'test-and-cut'
  schedule:
    - cron: "0 0 * * *"  # Run every day at midnight

jobs:
  test-and-maybe-cut:
    runs-on: ubuntu-latest
    environment:
      name: testrelease
    permissions:
      contents: read
    steps:
    - uses: actions/checkout@v4
    - name: Set inputs for scheduled runs
      id: inputs
      run: |
        if [[ "${{ github.event_name }}" == "schedule" ]]; then
          echo "commit_hash=" >> $GITHUB_OUTPUT
          echo "version=" >> $GITHUB_OUTPUT
        else
          echo "commit_hash=${{ inputs.commit_hash }}" >> $GITHUB_OUTPUT
          echo "version=${{ inputs.version }}" >> $GITHUB_OUTPUT
        fi
      shell: bash
    - name: Set version if not provided
      id: version
      run: |
        if [ -z "${{ steps.inputs.outputs.version }}" ]; then
          # For nightly builds, read the version from main's pyproject.toml
          # and generate a timestamped dev version
          git clone --depth 1 --branch main https://github.com/llamastack/llama-stack.git /tmp/llama-stack
          VERSION=$(grep '^version = ' /tmp/llama-stack/pyproject.toml | sed 's/version = "\(.*\)"/\1/')

          # If version ends with .dev0, strip it; otherwise increment patch version
          if [[ "$VERSION" =~ \.dev0$ ]]; then
            BASE_VERSION="${VERSION%.dev0}"
          else
            if [[ "$VERSION" =~ ^([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
              MAJOR="${BASH_REMATCH[1]}"
              MINOR="${BASH_REMATCH[2]}"
              PATCH="${BASH_REMATCH[3]}"
              NEXT_PATCH=$((PATCH + 1))
              BASE_VERSION="${MAJOR}.${MINOR}.${NEXT_PATCH}"
            else
              echo "ERROR: Invalid version format: $VERSION"
              exit 1
            fi
          fi

          DEV_VERSION="${BASE_VERSION}.dev$(date +%Y%m%d)"
          echo "value=${DEV_VERSION}" >> $GITHUB_OUTPUT
          echo "cut_mode=test-and-cut" >> $GITHUB_OUTPUT
          echo "Generated nightly dev version: ${DEV_VERSION} (from ${VERSION})"
        else
          echo "value=${{ steps.inputs.outputs.version }}" >> $GITHUB_OUTPUT
          echo "cut_mode=${{ steps.inputs.outputs.cut_mode }}" >> $GITHUB_OUTPUT
        fi
      shell: bash
    - uses: ./actions/test-and-cut
      with:
        version: ${{ steps.version.outputs.value }}
        commit_hash: ${{ steps.inputs.outputs.commit_hash }}
        cut_mode: ${{ steps.version.outputs.cut_mode }}
        # TODO: this will expire in 90 days; we should figure out a
        # GitHub App setup that can be used instead
        github_token: ${{ secrets.LLAMA_REPOS_PAT }}
